#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('socket:server')
var http = require('http')
const socket_io = require('socket.io')
const combineReducers = require('redux').combineReducers
const reducer = combineReducers({
  blocks: require('../client/src/blocks/duck').reducer,
  cards: require('../client/src/cards/duck').reducer
})
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001')
app.set('port', port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)
let state = reducer({}, { type: 'INIT' })

const io = socket_io()
io.attach(server)
io.on('connection', socket => {
  console.log('connected')
  socket.emit('action', { type: 'INITIAL_STATE', state })
  socket.on('action', action => {
    state = reducer(state, action)
    socket.broadcast.emit(
      'action',
      Object.assign({}, action, {
        type: action.type.replace('send', 'receive')
      })
    )
  })
})
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}
